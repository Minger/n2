- content_for :head do
  :javascript
    $(function() {
      $('.view-object a').click(function(e) { e.preventDefault(); });

      $('#items').html("<p>Loading items...</p>");
      $.get('/admin/featured_items/contents/load_items', null, null, 'script');

      $('#featured-items-select').live('change', function() {
        var type = $('option:selected', this).val();
        $('#items').html("<p>Loading items...</p>");
        $.get('/admin/featured_items/'+type+'/load_items', null, null, 'script');
      });

      $('#items ul a').live("click", function() { return false; });
      $('#items .pagination a').live("click", function(event) {
        event.preventDefault();
        var url = this.href.replace(/^(.+load_items\/)([0-9]+).*$/, "$1page/$2");
        $('#items').html("<p>Loading items...</p>");
        $.get(url, null, null, 'script');
      });

      $('.primary-drop').droppable({
        accept: 'li.ui-widget-content',
        activeClass: 'ui-state-hover',
        hoverClass: 'ui-state-active',
        drop: function(event, ui) {
          var dropContainer = $(this).parent(),
              dropBox       = $('.primary-drop', dropContainer),
              dropTitle     = $('.drop-item-title', dropContainer);

          $(this).addClass('dropped').removeClass('drop-error');

          $(this).attr('data-id', ui.draggable.attr('id'));
          dropTitle.html("<h1>"+$('h5', ui.draggable).text()+"</p>");
          dropBox.html('<img src="'+$('img', ui.draggable).attr('src')+'" />');
        }
      });
      $('#save-button')
        .live('mousedown', function() {
          $(this).addClass('ui-state-active');
        }).live('mouseup', function() {
          $(this).removeClass('ui-state-active');
        }).live('click', function() {
          var dropItems = $.map($('.primary-drop'), function(e, i) {
            return $(e).attr('data-id');
          });

          var error_count = 0;
          $.each($('.primary-drop'), function(index, value) {
            var item = $(value);
            if ( ! item.hasClass('dropped') ) {
              error_count += 1;
              item.addClass('drop-error');
            }
          });
          if (error_count > 0) {
            alert('You are missing '+error_count+' items in this template. Please drag items for all boxes in this template');
          } else {
            $.post("#{admin_view_object_path(@view_object, :format => 'json')}", {featured_items: dropItems, _method: "put"}, function(data) {
              if (typeof(data.success) !== 'undefined') {
                alert(data.success);
              } else {
                alert('There was a problem saving your page');
              }
            });
          }
        });
    });

#content
  #admin-actions
    =# link_to 'Return to View Objects index', admin_view_objects_path, :class=>"admin-btn"
    %button#save-button.admin-btn.float-right{:type => "button"} Update Template Settings

  = semantic_form_for @view_object_setting, :url => admin_view_objects_path(@view_object) do |form|
    = form.inputs do
      = form.input :key_name
      = form.input :locale_title
      = form.input :use_post_button, :as => :boolean
      = form.input :klass_name, :as => :select, :collection => @view_object_setting.class.rankable_classes.map {|c| [c.name.titleize, c.name] }
      %ul
        - @view_object_setting.kommands.each do |kommand|
          %li= kommand.inspect

  %h2 Update View Object
  = form_tag(admin_view_object_path(@view_object), :method => :put, :class => "formtastic") do
    = field_set_tag nil, :class => 'inputs' do
      %ol
        %li.input.string
          = label_tag 'key_name', 'View Object Name', :class => "label"
          = text_field_tag 'key_name', @view_object.name
        %li.input.string
          = label_tag 'locale_title', 'Locale Title', :class => "label"
          = text_field_tag 'locale_title', @view_object_setting.locale_title
        %li.input.string
          = label_tag 'locale_subtitle', 'Locale Subtitle', :class => "label"
          = text_field_tag 'locale_subtitle', @view_object_setting.locale_subtitle
        %li.input.string
          = label_tag 'klass_name', 'Model Resource', :class => "label"
          = select_tag 'klass_name', options_for_select(@view_object_setting.class.rankable_classes.map {|c| [c.name.titleize, c.name] }, @view_object_setting.klass_name)
        - kommand = @view_object_setting.kommands.first
        - klass = @view_object_setting.get_klass
        %li.input.string
          = label_tag 'kommand_name', 'Method', :class => "label"
          = select_tag 'kommand_name', options_for_select(klass.view_object_scope_methods, kommand[:method_name])
        %li.input.string
          = label_tag 'kommand_limit', 'Number of Items', :class => "label"
          = select_tag 'kommand_limit', options_for_select(limit_options, kommand[:args].first)
        %li.input.boolean
          = label_tag 'use_post_button', nil, :class => "label" do
            = check_box_tag 'use_post_button', 1, @view_object_setting.use_post_button
            Use Post Button
        %li.input.boolean
          = label_tag 'cache_disabled', 'Disable Caching', :class => "label" do
            = check_box_tag 'cache_disabled', 1, @view_object_setting.cache_disabled
            Disable Caching

    = field_set_tag nil, :class => 'buttons' do
      %ol
        %li
          = submit_tag "Update View Object"
